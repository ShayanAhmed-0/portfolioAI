// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // schema   = "streeteats"
  // schema   = "streeteatschat"
}

model User {
  id         String   @id @default(uuid())
  name       String
  profileUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  Room Room[]
}

model Vendor {
  id         String   @id @default(uuid())
  name       String
  profileUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  Room Room[]
}

model Media {
  id        String   @id @default(uuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Chat Chat[]
}

model Room {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Chat      Chat[]
}

model Chat {
  id        String   @id @default(uuid())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  senderId  String
  message   String
  isRead    Boolean  @default(false)
  media     Media?   @relation(fields: [mediaId], references: [id])
  mediaId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
